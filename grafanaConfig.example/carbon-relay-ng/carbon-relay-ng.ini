## Global settings ##

# instance id's distinguish stats of multiple relays.
# do not run multiple relays with the same instance id.
# supported variables:
#  ${HOST} : hostname
instance = "carbon-relay-ng"

## System ##
# this setting can be used to override the default GOMAXPROCS logic
# it is ignored if the GOMAXPROCS environment variable is set
# max_procs = 2
pid_file = "/var/run/carbon-relay-ng.pid"
# directory for spool files
spool_dir = "/var/spool/carbon-relay-ng"

## Logging ##
# one of trace debug info warn error fatal panic
# see docs/logging.md for level descriptions
# note: if you used to use `notice`, you should now use `info`.
log_level = "info"

## Admin ##
admin_addr = "carbon-relay-ng:2004"
http_addr = "carbon-relay-ng:8081"

## Inputs ##
### plaintext Carbon ###
listen_addr = "carbon-relay-ng:2003"
# close inbound plaintext connections if they've been idle for this long ("0s" to disable)
plain_read_timeout = "2m"
### Pickle Carbon ###
pickle_addr = "carbon-relay-ng:2013"
# close inbound pickle connections if they've been idle for this long ("0s" to disable)
pickle_read_timeout = "2m"

## Validation of inputs ##
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
validation_level_legacy = "medium"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
validation_level_m20 = "medium"

# you can also validate that each series has increasing timestamps
validate_order = false

# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
bad_metrics_max_age = "24h"

# Blocklist
# See https://github.com/grafana/carbon-relay-ng/blob/master/docs/config.md#Blocklist

blocklist = [
]

### AMQP ###
[amqp]
amqp_enabled = false
amqp_host = "relay"
amqp_port = 5672
amqp_user = "guest"
amqp_password = "guest"
amqp_vhost = "/graphite"
amqp_exchange = "metrics"
amqp_queue = ""
amqp_key = "#"
amqp_durable = false
amqp_exclusive = true

# Aggregators
# See https://github.com/grafana/carbon-relay-ng/blob/master/docs/config.md#Aggregators

# Rewriters
# See https://github.com/grafana/carbon-relay-ng/blob/master/docs/config.md#Rewriters

# Routes
# See https://github.com/grafana/carbon-relay-ng/blob/master/docs/config.md#Routes

[[rewriter]]
old = 'service_is_carbon-relay-ng'
new = 'stats.carbon-relay-ng.service_is_carbon-relay-ng'
not = ''
max = -1

[[rewriter]]
old = 'carbon-relay-ng.stats.carbon-relay-ng'
new = 'stats.carbon-relay-ng.carbon-relay-ng'
not = ''
max = -1

[[route]]
# a plain carbon route that sends all data to the specified carbon (graphite) server
key = 'default'
type = 'sendAllMatch'
destinations = [
  'go-carbon:2003 spool=true pickle=false',
]

# [[route]]
# # a plain carbon route that sends all data to the specified carbon (graphite) server
# key = 'default'
# type = 'sendAllMatch'
# sub = 'carbon-relay-ng.stats'
# destinations = [
#   'go-carbon:2003 spool=true pickle=false prefix=stats.carbon-relay-ng.',
# ]

# [[route]]
# # a plain carbon route that sends all data to the specified carbon (graphite) server
# key = 'default'
# type = 'sendAllMatch'
# sub = 'service_is_carbon-relay-ng'
# destinations = [
#   'go-carbon:2003 spool=true pickle=false prefix=stats.carbon-relay-ng.',
# ]

[init]
# init commands (DEPRECATED)
# see https://github.com/grafana/carbon-relay-ng/blob/master/docs/config.md#Imperatives
cmds = [
]

## Instrumentation ##

[instrumentation]
# in addition to serving internal metrics via expvar, you can send them to graphite/carbon
# IMPORTANT: setting this to "" will disable flushing, and metrics will pile up and lead to OOM
# see https://github.com/grafana/carbon-relay-ng/issues/50
# so for now you MUST send them somewhere. sorry.
# If you really don't want them, send them in the relay and then ignore them with the following blocklist entries:
# (fill in the instance - see top of this file - or just remove the '<instance>' bit to drop all carbon-relay-ng data (even from other relays)
# 'prefix service_is_carbon-relay-ng.<instance>',
# 'prefix carbon-relay-ng.stats.<instance>'
# (Also, the interval here must correspond to your setting in storage-schemas.conf if you use grafana hosted metrics)
graphite_addr = "carbon-relay-ng:2003"
graphite_interval = 60000  # in ms